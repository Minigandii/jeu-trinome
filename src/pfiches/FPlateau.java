/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pfiches;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import jeutrinome.Controle;
import jeutrinome.Joueur;
import jeutrinome.Pion;
import jeutrinome.Plateau;

/**
 *
 * @author tobia
 */
public class FPlateau extends javax.swing.JDialog implements ActionListener {

    private FAccueil fichaccueil;//instance de la classe FAccueil, fiche d'accueil du trinôme
    private Controle C1;
    private Joueur J1;
    private Joueur J2;
    JButton Bouton = new JButton();
    private boolean chargement;//permet de savoir si une partie est déja en cours
    int cpt = 0;
    int click = 0;
    int tailleD = 0;
    String Pionadeplacer;
    String[] listedepl;
    JButton boutchange = null;
    boolean tourRouge = true;
    String[] c = null;
    Pion[] nbPion = new Pion[15];//Tableau de pion du Joueur J1
    Pion[] nbPion2 = new Pion[15];//Tableau de pion du Joueur J2

    /**
     * Creates new form FPlateau
     */
    public FPlateau(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public FPlateau(java.awt.Frame parent, boolean modal, Controle C1, Joueur J1, Joueur J2, boolean chargement) {
        super(parent, modal);
        this.C1 = C1;
        this.J1 = J1;
        this.J2 = J2;
        this.chargement = chargement;
        initComponents();
        //deuxième constructeur
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        pbouton = new javax.swing.JPanel();
        bRouge = new javax.swing.JRadioButton();
        bVert = new javax.swing.JRadioButton();
        lTitre = new javax.swing.JLabel();
        bQuitter = new javax.swing.JButton();
        bJouer = new javax.swing.JButton();
        bSauvegarder = new javax.swing.JButton();
        lJ1 = new javax.swing.JLabel();
        lJ2 = new javax.swing.JLabel();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Plateau");

        javax.swing.GroupLayout pboutonLayout = new javax.swing.GroupLayout(pbouton);
        pbouton.setLayout(pboutonLayout);
        pboutonLayout.setHorizontalGroup(
            pboutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        pboutonLayout.setVerticalGroup(
            pboutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        bRouge.setBackground(new java.awt.Color(255, 0, 0));
        buttonGroup1.add(bRouge);
        bRouge.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bRouge.setSelected(true);
        bRouge.setText("Rouge");
        bRouge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        bVert.setBackground(new java.awt.Color(0, 255, 0));
        buttonGroup1.add(bVert);
        bVert.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bVert.setText("Vert");
        bVert.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lTitre.setBackground(new java.awt.Color(0, 0, 0));
        lTitre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lTitre.setForeground(new java.awt.Color(255, 255, 255));
        lTitre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lTitre.setText("Sélectionnez une couleur :");
        lTitre.setOpaque(true);

        bQuitter.setText("Quitter");
        bQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bQuitterActionPerformed(evt);
            }
        });

        bJouer.setBackground(new java.awt.Color(0, 204, 0));
        bJouer.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bJouer.setForeground(new java.awt.Color(255, 255, 255));
        bJouer.setText("Jouer");
        bJouer.setToolTipText("");
        bJouer.setBorderPainted(false);
        bJouer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bJouer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bJouerActionPerformed(evt);
            }
        });

        bSauvegarder.setText("Sauvegarder");
        bSauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSauvegarderActionPerformed(evt);
            }
        });

        lJ1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lJ1.setText("jLabel1");
        lJ1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                lJ1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lJ2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lJ2.setText("jLabel2");
        lJ2.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                lJ2AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pbouton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(bJouer, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bSauvegarder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bQuitter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bVert, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bRouge, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(131, 131, 131))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lJ1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lJ2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pbouton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(lTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bRouge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bVert)
                        .addGap(18, 18, 18)
                        .addComponent(bJouer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lJ1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lJ2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)))
                .addComponent(bSauvegarder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bQuitter))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void initialiserR() throws IOException {
        lJ1.setText(C1.getJ1().getPseudo() + " a la couleur rouge");
        lJ2.setText(C1.getJ2().getPseudo() + " a la couleur verte");
        //Initialise toutes les variables du Joueur J1 s'il choisit la couleur rouge.
        String ZoneRougeJ2[];
        ZoneRougeJ2 = new String[3];
        ZoneRougeJ2[0] = "KE";
        ZoneRougeJ2[1] = "KF";
        ZoneRougeJ2[2] = "KG";
        String ZoneRougeJ1[];
        ZoneRougeJ1 = new String[3];
        ZoneRougeJ1[0] = "AE";
        ZoneRougeJ1[1] = "AF";
        ZoneRougeJ1[2] = "AG";
        String Case[];
        String Case2;
        Case = new String[121];
        int cpt = 0;
        for (int i = 65; i < 76; i++) {
            for (int j = 65; j < 76; j++) {
                char a = (char) i;
                String c = Character.toString(a);
                char b = (char) j;
                String d = Character.toString(b);
                Case2 = (c + d);
                Case[cpt] = Case2;
                cpt++;
            }
        }
        Plateau T1 = new Plateau(23, 23, ZoneRougeJ1, ZoneRougeJ2, Case);
        String Pseudo1 = C1.getJ1().getPseudo();
        String Pseudo2 = C1.getJ2().getPseudo();
        String couleur1 = "rouge";
        String couleur2 = "verte";
        Pion PionJ1[] = new Pion[15];
        Pion PionJ2[] = new Pion[15];
        Joueur J1 = new Joueur(Pseudo1, couleur1, PionJ1);
        Joueur J2 = new Joueur(Pseudo2, couleur2, PionJ2);
        C1 = new Controle(J1, J2, T1);
        C1.debutpartie("rouge");//utilise la méthode debutpartie avec comme couleur rouge

        JButton Bouton[][] = new JButton[11][11];//création du tableau de bouton de taille 11x11

        GridLayout tab = new GridLayout(0, 11); // Le 0 dit que l'ordi doit calculer lui-même le nb de lignes, dès qu'il y a 11 éléments il passe à la ligne suivante et ainsi de suite
        pbouton.setLayout(tab); // Associe ce gestionnaire de placement au pannel

        char a = 65;
        char b = 65;
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                JButton bout = new JButton();//créer un bouton
                Dimension dim = new Dimension(50, 50);//Dimensionne la taille du bouton
                bout.setPreferredSize(dim);//applique la dimension au bouton
                bout.addActionListener(this);// ajouter un écouteur sur le bouton
                bout.setActionCommand(String.valueOf(a) + String.valueOf(b));// ajouter les coordonnées du boutons
                Bouton[i][j] = bout;// ajouter le bouton dans le tableau
                pbouton.add(Bouton[i][j]);// ajouter le bouton dans le panel
                this.pack();//mettre à jour l’affichage
                Bouton[i][j].setVisible(true);//rendre le tableau de bouton visible
                b++;
            }
            a++;
            b = 65;
        }
        //premet de définir l'arrière-plan des boutons en appliquant un fond noir ou blanc comme un plateau d'échec
        boolean white = false;
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                if (white == true) {
                    Bouton[i][j].setBackground(Color.WHITE);//définir la couleur de l'arrière-plan du bouton en blanc
                    white = false;
                } else {
                    Bouton[i][j].setBackground(Color.BLACK);//définir la couleur de l'arrière-plan du bouton en noir
                    white = true;
                }
            }
        }
        //affiche les images des pions sur les boutons
        nbPion = J1.getnbPion();
        nbPion2 = J2.getnbPion();
        if (J1.getCouleur().equals("rouge")) {
            for (int i = 0; i < J1.getnbPion().length; i++) {
                char d = nbPion[i].getDesignation().charAt(0);
                char e = nbPion2[i].getDesignation().charAt(0);
                //Initialisation Pion rouge
                if (String.valueOf(d).equals("P")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide rouge.jpg")));//dispose un image pyramide rouge sur chaque emplacement réservé
                }
                if (String.valueOf(d).equals("D")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère rouge.jpg")));//dispose un image demi-sphère rouge sur chaque emplacement réservé
                }
                if (String.valueOf(d).equals("C")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/cube rouge.jpg")));//dispose un image cube rouge sur chaque emplacement réservé
                }
                //Initialisation Pion vert
                if (String.valueOf(e).equals("P")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide verte.jpg")));//dispose un image pyramide verte sur chaque emplacement réservé
                }
                if (String.valueOf(e).equals("D")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère verte.jpg")));//dispose un image demi-sphère verte sur chaque emplacement réservé
                }
                if (String.valueOf(e).equals("C")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/cube vert.jpg")));//dispose un image cube vert sur chaque emplacement réservé
                }
            }
        }

    }

    public void initialiserV() throws IOException {
        lJ1.setText(C1.getJ1().getPseudo() + " a la couleur verte");
        lJ2.setText(C1.getJ2().getPseudo() + " a la couleur rouge");
        this.tourRouge = false;
        //Même principe que la méthode initialiserR mais si le Joueur J1 choisit la couleur verte
        String ZoneRougeJ2[];
        ZoneRougeJ2 = new String[3];
        ZoneRougeJ2[0] = "KE";
        ZoneRougeJ2[1] = "KF";
        ZoneRougeJ2[2] = "KG";
        String ZoneRougeJ1[];
        ZoneRougeJ1 = new String[3];
        ZoneRougeJ1[0] = "AE";
        ZoneRougeJ1[1] = "AF";
        ZoneRougeJ1[2] = "AG";
        String Case[];
        String Case2;
        Case = new String[121];
        int cpt = 0;
        for (int i = 65; i < 76; i++) {
            for (int j = 65; j < 76; j++) {
                char a = (char) i;
                String c = Character.toString(a);
                char b = (char) j;
                String d = Character.toString(b);
                Case2 = (c + d);
                Case[cpt] = Case2;
                cpt++;
            }
        }
        Plateau T1 = new Plateau(23, 23, ZoneRougeJ1, ZoneRougeJ2, Case);
        String Pseudo1 = C1.getJ1().getPseudo();
        String Pseudo2 = C1.getJ2().getPseudo();
        String couleur1 = "verte";
        String couleur2 = "rouge";
        Pion PionJ1[] = new Pion[15];
        Pion PionJ2[] = new Pion[15];
        Joueur J1 = new Joueur(Pseudo1, couleur1, PionJ1);
        Joueur J2 = new Joueur(Pseudo2, couleur2, PionJ2);
        C1 = new Controle(J1, J2, T1);
        C1.debutpartie("verte");

        JButton Bouton[][] = new JButton[11][11];

        GridLayout tab = new GridLayout(0, 11); // Le 0 dit que l'ordi doit calculer lui-même le nb de lignes, dès qu'il y a 11 éléments il passe à la ligne suivante et ainsi de suite
        pbouton.setLayout(tab); // Associe ce gestionnaire de placement au pannel

        char a = 65;
        char b = 65;
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                JButton bout = new JButton();
                Dimension dim = new Dimension(50, 50);
                bout.setPreferredSize(dim);
                bout.addActionListener(this);
                bout.setActionCommand(String.valueOf(a) + String.valueOf(b));
                Bouton[i][j] = bout;
                pbouton.add(Bouton[i][j]);
                this.pack();
                Bouton[i][j].setVisible(true);
                b++;
            }
            a++;
            b = 65;
        }

        boolean white = false;
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                if (white == true) {
                    Bouton[i][j].setBackground(Color.WHITE);
                    white = false;
                } else {
                    Bouton[i][j].setBackground(Color.BLACK);
                    white = true;
                }
            }
        }

        nbPion = J1.getnbPion();
        nbPion2 = J2.getnbPion();
        for (int i = 0; i < J1.getnbPion().length; i++) {
            char d = nbPion[i].getDesignation().charAt(0);
            char e = nbPion2[i].getDesignation().charAt(0);
            //Initialisation Pion vert
            if (String.valueOf(d).equals("P")) {
                Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide verte.jpg")));
            }
            if (String.valueOf(d).equals("D")) {
                Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère verte.jpg")));
            }
            if (String.valueOf(d).equals("C")) {
                Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/cube vert.jpg")));
            }
            //Initialisation Pion rouge
            if (String.valueOf(e).equals("P")) {
                Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide rouge.jpg")));
            }
            if (String.valueOf(e).equals("D")) {
                Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère rouge.jpg")));
            }
            if (String.valueOf(e).equals("C")) {
                Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/cube rouge.jpg")));
            }
        }
    }

    public void initialiserC() throws IOException {
        //Même principe que initialiserR() et initialiserV() mais dans le cas de la reprise d'une partie
        this.J1 = C1.getJ1();
        this.J2 = C1.getJ2();
        JButton Bouton[][] = new JButton[11][11];

        GridLayout tab = new GridLayout(0, 11); // Le 0 dit que l'ordi doit calculer lui-même le nb de lignes, dès qu'il y a 11 éléments il passe à la ligne suivante et ainsi de suite
        pbouton.setLayout(tab); // Associe ce gestionnaire de placement au pannel

        char a = 65;
        char b = 65;
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                JButton bout = new JButton();
                Dimension dim = new Dimension(50, 50);
                bout.setPreferredSize(dim);
                bout.addActionListener(this);
                bout.setActionCommand(String.valueOf(a) + String.valueOf(b));
                Bouton[i][j] = bout;
                pbouton.add(Bouton[i][j]);
                this.pack();
                Bouton[i][j].setVisible(true);
                b++;
            }
            a++;
            b = 65;
        }

        boolean white = false;
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 11; j++) {
                if (white == true) {
                    Bouton[i][j].setBackground(Color.WHITE);
                    white = false;
                } else {
                    Bouton[i][j].setBackground(Color.BLACK);
                    white = true;
                }
            }
        }

        nbPion = C1.getJ1().getnbPion();
        nbPion2 = C1.getJ2().getnbPion();
        for (int i = 0; i < J1.getnbPion().length; i++) {
            char d = nbPion[i].getDesignation().charAt(0);
            char e = nbPion2[i].getDesignation().charAt(0);
            if (C1.getJ1().getCouleur().equals("verte")) {
                //Initialisation Pion vert
                if (String.valueOf(d).equals("P")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide verte.jpg")));
                }
                if (String.valueOf(d).equals("D")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère verte.jpg")));
                }
                if (String.valueOf(d).equals("C")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/cube vert.jpg")));
                }
                //Initialisation Pion rouge
                if (String.valueOf(e).equals("P")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide rouge.jpg")));
                }
                if (String.valueOf(e).equals("D")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère rouge.jpg")));
                }
                if (String.valueOf(e).equals("C")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/cube rouge.jpg")));
                }
            } else {
                //Initialisation Pion rouge
                if (String.valueOf(d).equals("P")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide rouge.jpg")));
                }
                if (String.valueOf(d).equals("D")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère rouge.jpg")));
                }
                if (String.valueOf(d).equals("C")) {
                    Bouton[nbPion[i].getPlacement().charAt(0) - 65][nbPion[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/cube rouge.jpg")));
                }
                //Initialisation Pion rouge
                if (String.valueOf(e).equals("P")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide verte.jpg")));
                }
                if (String.valueOf(e).equals("D")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère verte.jpg")));
                }
                if (String.valueOf(e).equals("C")) {
                    Bouton[nbPion2[i].getPlacement().charAt(0) - 65][nbPion2[i].getPlacement().charAt(1) - 65].setIcon(new ImageIcon(getClass().getResource("/pimages/cube vert.jpg")));
                }
            }
            lJ1.setText(C1.getJ1().getPseudo() + " a la couleur " + C1.getJ1().getCouleur());
            lJ2.setText(C1.getJ2().getPseudo() + " a la couleur " + C1.getJ2().getCouleur());
        }
    }

    public void DeplacementPossilble(String a) throws NullPointerException {
        if (this.click == 0 && tourRouge == true) { // Vérifie quel joueur joue
            try {
                String[] b = C1.Contrainte(C1.getJ1().Recherche(a).ListeDeplacement()); // Récupère la liste de déplacement possible
                if (b[0].equals("rouge") || b[0].equals("verte")) { // annule si aucun déplacement n'est possible
                    JOptionPane.showMessageDialog(this, "Déplacement impossible");
                } else {
                    // Prépare le déplacement
                    this.listedepl = b;
                    this.click = 2;
                    this.tailleD = b.length;
                    this.Pionadeplacer = a;
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Déplacement impossible");
            }
        }
        if (this.click == 0 && tourRouge == false) {// Vérifie quel joueur joue
            try {
                String[] b = C1.Contrainte(C1.getJ2().Recherche(a).ListeDeplacement()); // Récupère la liste de déplacement possible
                if (b[0].equals("rouge") || b[0].equals("verte")) {// annule si aucun déplacement n'est possible
                    JOptionPane.showMessageDialog(this, "Déplacement impossible");
                } else {
                    // Prépare le déplacement
                    this.listedepl = b;
                    this.click = 2;
                    this.tailleD = b.length;
                    this.Pionadeplacer = a;
                }
            } catch (NullPointerException ex) {
                System.out.println("PB5");
                JOptionPane.showMessageDialog(this, "Déplacement impossible");
            }
        }

    }

    public void actionPerformed(ActionEvent e) {
        String[] a = null;

        if (this.click == 0) { // Vériefie si c'est le début du tour d'un joueur
            JButton source = (JButton) e.getSource();
            this.boutchange = source;
            a = source.getActionCommand().split("/"); // Récupère les coordonées du boutons
            try {
                DeplacementPossilble(a[0]); // Lance la fonction DeplacementPossible
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Déplacement impossible");
            }
        }
        int depl = 0;
        if (this.click == 2 && tourRouge == true) { // Vérifie si c'est le deuxième click et de quel joueur
            if (a != null) {
                this.c = a;
            }
            JButton source = (JButton) e.getSource();
            String[] b = source.getActionCommand().split("/"); // Récupère les coordonnées du nouveau bouton
            for (int i = 0; i < tailleD; i++) {
                if (b[0].equals(listedepl[i])) { // Vérifie si les coordonnées du nouveau bouton correspondent à une case de déplacement possible
                    depl = 1;
                    if (C1.getJ1().getCouleur().equals("rouge")) { // Vérifie la couleur du joueur et change les images en fonction du pion déplacé
                        if (String.valueOf(C1.getJ1().Recherche(c[0]).getDesignation().charAt(0)).equals("P")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide rouge.jpg")));
                        }
                        if (String.valueOf(C1.getJ1().Recherche(c[0]).getDesignation().charAt(0)).equals("C")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/cube rouge.jpg")));
                        }
                        if (String.valueOf(C1.getJ1().Recherche(c[0]).getDesignation().charAt(0)).equals("D")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère rouge.jpg")));
                        }
                    } else {
                        if (String.valueOf(C1.getJ1().Recherche(c[0]).getDesignation().charAt(0)).equals("P")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide verte.jpg")));
                        }
                        if (String.valueOf(C1.getJ1().Recherche(c[0]).getDesignation().charAt(0)).equals("C")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/cube vert.jpg")));
                        }
                        if (String.valueOf(C1.getJ1().Recherche(c[0]).getDesignation().charAt(0)).equals("D")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère verte.jpg")));
                        }
                    }
                    if (C1.getJ2().Recherche(b[0]) != null) { // Vérifie si il y a un pion adverse sur la case déplacé
                        C1.getJ1().Recherche(c[0]).Capture(C1.getJ2().Recherche(b[0])); // Effectue une capture dans C1
                    } else {
                        C1.getJ1().Recherche(c[0]).Deplacement(b[0]); // Si il n'y a pas de capture effectue le déplacement dans C1
                    }
                    if (C1.FindePartie() == true) { // Vérifie si la partie est finie
                        JOptionPane.showMessageDialog(this, "FIN DE PARTIE \nFélicitation, vous avez gagné !");
                    }
                    this.click = 0;
                    this.tourRouge = false;
                }
                if (a == null) {
                    if (i == tailleD - 1 && depl == 0) { // Si le nouveau bouton ne correspond pas à un déplacement possible on l'annule
                        JOptionPane.showMessageDialog(this, "Déplacement impossible");
                        this.click = 0;
                    }
                }
            }

        }
        if (this.click == 2 && tourRouge == false) { // Même procésus que pour J1 mais pour J2
            if (a != null) {
                this.c = a;
            }
            JButton source = (JButton) e.getSource();
            String[] b = source.getActionCommand().split("/");
            for (int i = 0; i < tailleD; i++) {
                if (b[0].equals(listedepl[i])) {
                    depl = 1;
                    if (C1.getJ2().getCouleur().equals("rouge")) {
                        if (String.valueOf(C1.getJ2().Recherche(c[0]).getDesignation().charAt(0)).equals("P")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide rouge.jpg")));
                        }
                        if (String.valueOf(C1.getJ2().Recherche(c[0]).getDesignation().charAt(0)).equals("C")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/cube rouge.jpg")));
                        }
                        if (String.valueOf(C1.getJ2().Recherche(c[0]).getDesignation().charAt(0)).equals("D")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère rouge.jpg")));
                        }
                    } else {
                        if (String.valueOf(C1.getJ2().Recherche(c[0]).getDesignation().charAt(0)).equals("P")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/pyramide verte.jpg")));
                        }
                        if (String.valueOf(C1.getJ2().Recherche(c[0]).getDesignation().charAt(0)).equals("C")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/cube vert.jpg")));
                        }
                        if (String.valueOf(C1.getJ2().Recherche(c[0]).getDesignation().charAt(0)).equals("D")) {
                            boutchange.setIcon(null);
                            source.setIcon(new ImageIcon(getClass().getResource("/pimages/demi-sphère verte.jpg")));
                        }
                    }

                    if (C1.getJ1().Recherche(b[0]) != null) {
                        C1.getJ2().Recherche(c[0]).Capture(C1.getJ1().Recherche(b[0]));
                    } else {
                        C1.getJ2().Recherche(c[0]).Deplacement(b[0]);
                    }
                    if (C1.FindePartie() == true) {
                        JOptionPane.showMessageDialog(this, "FIN DE PARTIE \nFélicitation, vous avez gagné !");
                    }
                    this.click = 0;
                    this.tourRouge = true;
                }
                if (a == null) {
                    if (i == tailleD - 1 && depl == 0) {
                        JOptionPane.showMessageDialog(this, "Déplacement impossible");
                        this.click = 0;
                    }
                }
            }

        }

    }

    private void bQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bQuitterActionPerformed
        // TODO add your handling code here:
        System.exit(0);//quitte la fiche Plateau
    }//GEN-LAST:event_bQuitterActionPerformed

    private void bJouerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bJouerActionPerformed
        //lance une partie du jeu trinôme
        if (chargement == true) {
            bRouge.setVisible(false);
            bVert.setVisible(false);
            lTitre.setVisible(false);
            bJouer.setVisible(false);
            try {
                this.click = 0;
                initialiserC();
            } catch (IOException ex) {
                Logger.getLogger(FPlateau.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (bRouge.isSelected() && chargement == false) {//si la couleur rouge est sélectionnée
            try {
                initialiserR();
            } catch (IOException ex) {
                Logger.getLogger(FPlateau.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (bVert.isSelected() && chargement == false) {//si la couleur verte est sélectionnée
            try {
                C1.debutpartie("vert");
                initialiserV();
            } catch (IOException ex) {
                Logger.getLogger(FPlateau.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //rend invisible les boutons des couleurs, le texte et le bouton jouer
        bRouge.setVisible(false);
        bVert.setVisible(false);
        lTitre.setVisible(false);
        bJouer.setVisible(false);
    }//GEN-LAST:event_bJouerActionPerformed

    private void bSauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSauvegarderActionPerformed
        try {
            //sauvegarde la partie en cours et revient à la page d'accueil
            C1.Sauvegarde();
        } catch (IOException ex) {
        }
        fichaccueil = new FAccueil();
        this.setVisible(false);//rend invisible la fiche Plateau
        fichaccueil.setVisible(true);//rend visible la fiche Accueil
    }//GEN-LAST:event_bSauvegarderActionPerformed

    private void lJ1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_lJ1AncestorAdded
        lJ1.setText("");
    }//GEN-LAST:event_lJ1AncestorAdded

    private void lJ2AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_lJ2AncestorAdded
        lJ2.setText("");
    }//GEN-LAST:event_lJ2AncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FPlateau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FPlateau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FPlateau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FPlateau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FPlateau dialog = new FPlateau(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bJouer;
    private javax.swing.JButton bQuitter;
    private javax.swing.JRadioButton bRouge;
    private javax.swing.JButton bSauvegarder;
    private javax.swing.JRadioButton bVert;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JLabel lJ1;
    private javax.swing.JLabel lJ2;
    private javax.swing.JLabel lTitre;
    private javax.swing.JPanel pbouton;
    // End of variables declaration//GEN-END:variables
}
